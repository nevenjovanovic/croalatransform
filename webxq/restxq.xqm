(:~
 : This module contains some basic examples for RESTXQ annotations
 : @author BaseX Team
 :)
module namespace page = 'http://basex.org/modules/web-page';

(:~
 : This function generates the welcome page.
 : @return HTML page
 :)
declare
  %rest:path("")
  %output:method("xhtml")
  %output:omit-xml-declaration("no")
  %output:doctype-public("-//W3C//DTD XHTML 1.0 Transitional//EN")
  %output:doctype-system("http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd")
  function page:start()
  as element(Q{http://www.w3.org/1999/xhtml}html)
{
  <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
      <title>BaseX HTTP Services</title>
      <link rel="stylesheet" type="text/css" href="static/style.css"/>
    </head>
    <body>
      <div class="right"><img src="static/basex.svg" width="96"/></div>
      <h2>BaseX HTTP Services</h2>
			<div>Welcome to the BaseX HTTP Services, which allow you to...</div>
			<ul>
				<li>Query and modify databases via <a href="http://docs.basex.org/wiki/REST">REST</a> (try <a href='rest'>here</a>)</li>
				<li>Browse and update resources via <a href="http://docs.basex.org/wiki/WebDAV">WebDAV</a></li>
				<li>Create web applications and services with <a href="http://docs.basex.org/wiki/RESTXQ">RESTXQ</a></li>
			</ul>

      <p>This page was generated by RESTXQ. It facilitates the
      use of XQuery as a server-side processing language for the Web.</p>

      <h3>Example 1</h3>
      <p>The following links return different results.
      Both are generated by the same RESTXQ function:</p>
      <ul>
        <li><a href="hello/World">/hello/World</a></li>
        <li><a href="hello/Universe">/hello/Universe</a></li>
      </ul>

      <h3>Example 2</h3>
      <p>The next example presents how form data is processed via RESTXQ and the POST method:</p>
      <form method="post" action="form">
        <p>Your message:<br />
        <input name="message" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Parse words from Latin sentence</h3>
 <p>Enter a Latin sentence which you want to parse. 
    The result will be an XML file with lots of grammatical
    information for each word.</p>
      <form method="post" action="homon">
        <p>Sententia:<br />
        <input name="message" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Search authors in croalabib db</h3>
 <p>Enter name of a Croatian Latin author.</p>
      <form method="post" action="nominaxq">
        <p>Name:<br />
        <input name="nomq" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Annotationes in croalabib db</h3>
 <p>Annotationis siglum:</p>
      <form method="post" action="croalabib-ep2">
        <p>Name:<br />
        <input name="epq" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Persons in croalabib db</h3>
 <p>Enter a croalabib ID.</p>
      <form method="post" action="croalabib-pers">
        <p>Name:<br />
        <input name="nomq" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Titles of works in croalabib db</h3>
 <p>Enter part of title. Wildcards possible (e. g. <b>oratio.*</b> = orationem, orationis...)</p>
      <form method="post" action="croalabib-opera">
        <p>Name:<br />
        <input name="opq" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Search for authors' works in croalabib db</h3>
 <p>Enter name of a Croatian Latin author (capitalization is important).</p>
      <form method="post" action="nomid">
        <p>Name:<br />
        <input name="nomid" size="50"></input>
        <input type="submit" /></p>
      </form>
      
      <h3>Write an XQuery</h3>
 <p>Compose your own XQuery.</p>
      <form method="post" action="compoxq">
        <p>XQuery:<br />
        <textarea name="query" rows="5" cols="80"></textarea><br/>
        <input type="submit" /></p>
      </form>

      <h3>Example 3</h3>
      <p>The source code of the file that created this page
      (<code>{ static-base-uri() }</code>) is shown below:</p>
      <pre>{ unparsed-text(static-base-uri()) }</pre>
    </body>
  </html>
};

(:~
 : This function returns an XML response message.
 : @param $world  string to be included in the response
 : @return response element 
 :)
declare
  %rest:path("/hello/{$world}")
  %rest:GET
  function page:hello(
    $world as xs:string)
    as element(response)
{
  <response>
    <title>Hello { $world }!</title>
    <time>The current time is: { current-time() }</time>
  </response>
};

(:~
 : This function returns the result of a form request.
 : @param  $message  message to be included in the response
 : @param $agent  user agent string
 : @return response element 
 :)
declare
  %rest:path("/form")
  %rest:POST
  %rest:form-param("message","{$message}", "(no message)")
  %rest:header-param("User-Agent", "{$agent}")
  function page:hello-postman(
    $message as xs:string,
    $agent   as xs:string*)
    as element(response)
{
  <response type='form'>
    <message>{ $message }</message>
    <user-agent>{ $agent }</user-agent>
  </response>
};

(:~
 : This function returns lexical information on words from a form request.
 : @param  $message  message to be included in the response
 : @return response element 
 :)
declare
  %rest:path("/homon")
  %rest:POST
  %rest:form-param("message","{$message}", "(no message)")
  function page:homon-postman(
    $message as xs:string)
    { let $url := ("http://services.perseids.org/bsp/morphologyservice/analysis/word?word=RIJEC&amp;lang=lat&amp;engine=morpheuslat")
		(: convert string into sequence :)
let $rijeci := tokenize($message, "\W+")
(: for each item in sequence :)
return element w { for $r in $rijeci
let $parsed := (doc(replace($url,'RIJEC',$r)))
return element ana { $parsed } }
};

(:~
 : A free-form XQuery.
 :)
declare
  %rest:path("/compoxq")
  %rest:POST
  %rest:form-param("query","{$query}", "(no query)")
  function page:cpxq-postman(
    $query as xs:string*)
    { 
		let $q := xquery:eval($query, map{ '' := db:open('croalabib') })
		return element v { $q }
	
};

(:~
 : Search for names.
 :)
declare
  %rest:path("/nominaxq")
  %rest:POST
  %rest:form-param("nomq","{$nomq}", "(no nomq)")
  %output:method("xhtml")
  %output:omit-xml-declaration("no")
  %output:doctype-public("-//W3C//DTD XHTML 1.0 Transitional//EN")  
  %output:doctype-system("http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd")
  function page:cpxq-nomina(
    $nomq as xs:string)
    {
		element html {
		element head {
		<title>CroALa: nomina</title>,
		<link rel="icon" href="static/favicon.ico" type="image/x-icon"></link>,
    <link rel="stylesheet" type="text/css" href="static/dbkreport.css"></link>
		},
		element body {
		element table {
		element thead {
		element tr {
		element td { "Croala ID" },
		element td { "Nomen" }
		}
		},
		element tbody { 
			for $i in collection('croalabib')//*:person/*:persName[contains(text(), $nomq)]
	        return element tr {
	        element td { 
	         element a { attribute href { concat("http://solr.ffzg.hr/basex/rest/croalabib?query=//*:person[@xml:id='", data($i/../@xml:id), "']") } , data($i/../@xml:id) }
	         }, 
	        element td { data($i) } 
	        }
	        }
	        }
	        }
	        }
};

(:~
 : Get all entries with an ID from the name.
 :)
declare
  %rest:path("/nomid")
  %rest:POST
  %rest:form-param("nomid","{$nomid}", "(no nomid)")
  function page:cpxq-nomid(
    $nomid as xs:string)
    { 
		element p { 
		 for $aref in collection('croalabib')//*:person[*:persName[contains(text(), $nomid)]]/@xml:id
         let $elem := (collection('croalabib')//*:biblStruct)|(collection('croalabib')//*:bibl)|(collection('croalabib')//*:msDesc)|(collection('croalabib')//*:person)
		 return $elem[descendant::*:ref[@target[. eq $aref]]]
	 }
};


